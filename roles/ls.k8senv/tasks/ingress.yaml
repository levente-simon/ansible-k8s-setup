---

- name: set ingress
  set_fact:
    ingress: "{{ project.ingress | default([]) }}"

- name: set ingress_ena
  set_fact:
      ingress_ena: "{{ ingress.enabled | default(false) }}"
  when: ingress is defined 

- name: Create default http-backend depoloyment
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: default-http-backend
        labels:
          app.kubernetes.io/name: default-http-backend
          app.kubernetes.io/part-of: ingress-nginx
        namespace: {{ project.name + '-' + ingress.namespace }}
      spec:
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/name: default-http-backend
            app.kubernetes.io/part-of: ingress-nginx
        template:
          metadata:
            labels:
              app.kubernetes.io/name: default-http-backend
              app.kubernetes.io/part-of: ingress-nginx
          spec:
            terminationGracePeriodSeconds: 60
            containers:
            - name: default-http-backend
              # Any image is permissible as long as:
              # 1. It serves a 404 page at /
              # 2. It serves 200 on a /healthz endpoint
              image: gcr.io/google_containers/defaultbackend:1.4
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
              ports:
              - containerPort: 8080
              resources:
                limits:
                  cpu: 10m
                  memory: 20Mi
                requests:
                  cpu: 10m
                  memory: 20Mi
      EOF
  when: ingress_ena

- name: Create service for default http backend
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Service
      metadata:
        name: default-http-backend
        namespace: {{ project.name + '-' + ingress.namespace }}
        labels:
          app.kubernetes.io/name: default-http-backend
          app.kubernetes.io/part-of: ingress-nginx
      spec:
        ports:
        - port: 80
          targetPort: 8080
        selector:
          app.kubernetes.io/name: default-http-backend
          app.kubernetes.io/part-of: ingress-nginx
      EOF
  when: ingress_ena

- name: Create configmap for nginx configuration
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: nginx-configuration
        namespace: {{ project.name + '-' + ingress.namespace }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      data:
        enable-modsecurity: "true"
        enable-owasp-modsecurity-crs: "true"
      EOF
  when: ingress_ena

- name: Create configmap for tcp services
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: tcp-services
        namespace: {{ project.name + '-' + ingress.namespace }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      EOF
  when: ingress_ena

- name: Create configmap for udp services
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: udp-services
        namespace: {{ project.name + '-' + ingress.namespace }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      EOF
  when: ingress_ena

- name: Create service account for nginx ingress
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: nginx-ingress-serviceaccount
        namespace: {{ project.name + '-ingress' }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      EOF
  when: ingress_ena

- name: Create managed namespace role for nginx ingress
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: Role
      metadata:
        name: nginx-ingress-managed-namespace-role
        namespace: {{ project.name + '-' + ingress.namespace }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      rules:
        - apiGroups:
            - ""
          resources:
            - namespaces
          verbs:
            - get
        - apiGroups:
            - ""
          resources:
            - configmaps
            - pods
            - secrets
            - endpoints
          verbs:
            - get
            - list
            - watch
        - apiGroups:
            - ""
          resources:
            - services
          verbs:
            - get
            - list
            - update
            - watch
        - apiGroups:
            - extensions
          resources:
            - ingresses
          verbs:
            - get
            - list
            - watch
        - apiGroups:
            - extensions
          resources:
            - ingresses/status
          verbs:
            - update
        - apiGroups:
            - ""
          resources:
            - configmaps
          resourceNames:
            - ingress-controller-leader-nginx
          verbs:
            - get
            - update
        - apiGroups:
            - ""
          resources:
            - configmaps
          verbs:
            - create
        - apiGroups:
            - ""
          resources:
            - endpoints
          verbs:
            - create
            - get
            - update
        - apiGroups:
            - ""
          resources:
            - events
          verbs:
            - create
            - patch
      EOF
  when: ingress_ena

- name: Create role for nginx ingress
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: Role
      metadata:
        name: nginx-ingress-role
        namespace: {{ project.name + '-ingress' }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - endpoints
          verbs:
          - create
          - update
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - services
          verbs:
          - update
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resourceNames:
          - ingress-controller-leader-nginx
          resources:
          - configmaps
          verbs:
          - get
          - update
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - create
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - endpoints
          verbs:
          - get
          - create
          - update
          - list
          - watch
      EOF
  when: ingress_ena

- name: Bind nginx ingress service account to nginx ingress role 
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: RoleBinding
      metadata:
        name: nginx-ingress-role-nisa-binding
        namespace: {{ project.name + '-ingress' }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: nginx-ingress-role
      subjects:
        - kind: ServiceAccount
          name: nginx-ingress-serviceaccount
          namespace: {{ project.name + '-ingress' }}
      EOF
  when: ingress_ena

- name: Bind nginx ingress service account to nginx ingress role
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: RoleBinding
      metadata:
        namespace: {{ project.name + '-' + ingress.namespace }}
        name: nginx-ingress-managedns-role-nisa-binding
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: nginx-ingress-managed-namespace-role
      subjects:
        - kind: ServiceAccount
          name: nginx-ingress-serviceaccount
          namespace: {{ project.name + '-ingress' }}
      EOF
  when: ingress_ena

- name: get apiserver ip addresses
  shell: "kubectl get pod -n kube-system -o wide |  awk '/apiserver/{print $6}'"
  register: apiservers

# TODO: restrict ingress traffic
- name: Apply network policy for ingress controller
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        name: np-ingress-controller
        namespace: {{ project.name + '-ingress' }}
      spec:
        podSelector:
          matchLabels:
            app.kubernetes.io/name: ingress-nginx
        policyTypes:
        - Egress
        - Ingress
        egress:
        - to:
      {% for ip in apiservers.stdout_lines %}
          - ipBlock:
              cidr: {{ ip }}/32
      {% endfor %}
          ports:
          - port: 6443
            protocol: TCP
        - to:
          - namespaceSelector:
              matchLabels:
                project: {{ project.name }}
                name: {{ ingress.namespace }}
        ingress:
        - {}
      EOF
  when: ingress_ena

- name: Apply network policy for ingress namespace
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        name: np-from-ingress-controller
        namespace: {{ project.name + '-' + ingress.namespace }}
      spec:
        podSelector:
          matchLabels:
            app.kubernetes.io/name: default-http-backend
            app.kubernetes.io/part-of: ingress-nginx
        policyTypes:
        - Ingress
        ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                project: {{ project.name }}
                name: ingress
          ports:
            - port: 8080
              protocol: TCP
      EOF
  when: ingress_ena

- name: Create nginx ingress controller deployment
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: nginx-ingress-controller
        namespace: {{ project.name + '-ingress' }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      spec:
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/part-of: ingress-nginx
        template:
          metadata:
            labels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
            annotations:
              prometheus.io/port: '10254'
              prometheus.io/scrape: 'true'
          spec:
            serviceAccountName: nginx-ingress-serviceaccount
            containers:
              - name: nginx-ingress-controller
                image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.19.0
                args:
                  - /nginx-ingress-controller
                  - --default-backend-service={{ project.name + '-' + ingress.namespace }}/default-http-backend
                  - --configmap={{ project.name + '-' + ingress.namespace }}/nginx-configuration
                  - --tcp-services-configmap={{ project.name + '-' + ingress.namespace }}/tcp-services
                  - --udp-services-configmap={{ project.name + '-' + ingress.namespace }}/udp-services
                  - --publish-service=\$(POD_NAMESPACE)/ingress-nginx
                  - --annotations-prefix=nginx.ingress.kubernetes.io
                  - --http-port=8080
                  - --https-port=8443
                  - --watch-namespace={{ project.name + '-' + ingress.namespace }}
                securityContext:
                  capabilities:
                      drop:
                      - ALL
                  # www-data -> 33
                  runAsUser: 33
                env:
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                ports:
                - name: http
                  containerPort: 8080
                - name: https
                  containerPort: 8443
                livenessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /healthz
                    port: 10254
                    scheme: HTTP
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /healthz
                    port: 10254
                    scheme: HTTP
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
      EOF
  when: ingress_ena

- name: Create service for nginx ingress 
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Service
      metadata:
        name: ingress-nginx
        namespace: {{ project.name + '-ingress' }}
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      spec:
        type: NodePort
        ports:
        - name: http
          port: 8080
      {% if ingress.nodeport_http is defined %}
          nodePort: {{ ingress.nodeport_http }}
      {% endif %}
          protocol: TCP
        - name: https
          port: 8443
      {% if ingress.nodeport_https is defined %}
          nodePort: {{ ingress.nodeport_https }}
      {% endif %}
          protocol: TCP
        selector:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
      EOF
  when: ingress_ena